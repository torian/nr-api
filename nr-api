#!/usr/bin/env python
###############################################################################

"""Usage: 
  nr-api <object> <command> --api-key <key> [options]

Server commands and options

  <commands>                            list, search, policy
  --policy-name <policy>                Policy to add server to

Options:

  -k <apikey>, --api-key <apikey>       NewRelic API Key
  -i <id>, --id <id>                    Object id 
  -n <name>, --name <name>              Object name / pattern

  -j,--json                             Output json [default: true]
  -l <loglevel>, --loglevel <loglevel>  loglevel [default: error]
  -h,--help                             Display help

"""

###############################################################################

import sys
import re
import json

from   pprint import pprint
from   docopt import  docopt

import logging

import newrelic_api.servers
import newrelic_api.alert_policies
import newrelic_api.labels

###############################################################################

class NewRelicClass(object):

  def __init__(self, obj_type, api_key, loglevel = logging.INFO):

    # Map class types
    obj_cls = dict(
      server       = newrelic_api.servers.Servers,
      label        = newrelic_api.labels.Labels,
      alert_policy = newrelic_api.alert_policies.AlertPolicies,
    )

    # Map to plural to retrieve list()[items]
    obj_items = dict(
      server       = 'servers',
      label        = 'labels',
      alert_policy = 'alert_policies',
    )

    self.api_key  = api_key
    self.loglevel = loglevel

    cls        = obj_cls.get(obj_type)
    self.cls   = cls(api_key = self.api_key)
    self.items = self.cls.list()[obj_items.get(obj_type)]

    log_fmt     = '%(asctime)s %(levelname)s: %(message)s'
    log_datefmt = '%d/%b/%Y:%H:%M:%S'
    logging.basicConfig(format = log_fmt, datefmt = log_datefmt, level = loglevel)


  def list(self, fmt_json = False):
    """
      Return a list of objects
    """
    r = self.items
    if fmt_json:
      return json.dumps(r, indent=4, separators=(',', ': '))
    return r


  def search(self, field = None, pattern = None):
    """
      Search for objs that match a pattern.
      The field is defined by --id or --name parameters command line args
    """
    try:
      if field is None:
        field   = 'name'
        pattern = '.*'
      
      matches = filter(lambda o: re.search(str(pattern),str(o[field])) != None, self.items)
      if self.loglevel == logging.DEBUG:
        logging.debug("Matched %i objects:" % len(matches))
        for m in matches:
          logging.debug("name[%s] id[%s]" % (m['name'], m['id']))
      return map(lambda m: m['id'], matches)

    except IndexError:
      return None



class NewRelicServers(NewRelicClass):

  def __init__(self, api_key, loglevel = logging.INFO):
    NewRelicClass.__init__(self, 'server', api_key, loglevel)
    self.servers = self.items


  def server(self, id):
    """
      Look for id in server list and return the complete structure for it
    """
    try:
      return filter(lambda server: server['id'] == id, self.servers)[0]
    except IndexError:
      return None


  def delete(self, id):
    """
      Delete a server from NR
      Only servers that are not reporting can be removed
    """
    try:
      s = filter(lambda server: server['id'] == id, self.servers)[0]
      
      logging.debug("Server to remove: %s name[%s] id[%s]" % (s['host'], s['name'], s['id']))
      
      if s['reporting']:
        msg = "Reporting server %s[%s] cannot be deleted" % (s['host'], s['id'])
        logging.warning(msg)
        return False
      
      logging.info("Deleting server %s" % s)
      self.cls.delete(s['id'])
        
    except IndexError: 
      logging.warning("Server ID %s does not exist" % id)



class NewRelicAlertPolicies(NewRelicClass):

  def __init__(self, api_key, loglevel = logging.INFO):
    NewRelicClass.__init__(self, 'alert_policy', api_key, loglevel)
    self.alert_policies = self.items


  def policy(self, id):
    try:
      return filter(lambda p: p['id'] == id, self.alert_policies)[0]
    except IndexError:
      return None


  def id(self, name):
    try:
      return filter(lambda p: p['name'] == name, self.policies())[0]['id']
    except IndexError:
      return None


  def add_servers(self, id, server_ids = None):
    """
      Add servers by id to a given alert policy
    """
    if server_ids is None:
      return False

    policy        = self.policy(id)
    policy_update = policy.copy()

    server_list   = policy['links']['servers']
    server_list.extend(server_ids)

    policy_update['links']['servers'] = server_list

    logging.info("Update policy %s with server ids %s" % (id, server_list))
    self.cls.update(id, { 'alert_policy': policy_update })


###############################################################################

cfg = {
  'loglevel': {
    'none':     logging.NOTSET,
    'info':     logging.INFO,
    'warn':     logging.WARN,
    'error':    logging.ERROR,
    'debug':    logging.DEBUG,
    'critical': logging.CRITICAL,
  }
}

# Options from __doc__
opts    = docopt(__doc__)
options = {}

# Set some defaults
for o in opts:
  key = o.strip('-')

  options[key] = opts[o]
 
# Debugging of options
if options['loglevel'] == 'debug':
  pprint(options)

field   = None
pattern = None

if options['id']: 
  field   = 'id'
  pattern = options['id']

elif options['name']: 
  field   = 'name'
  pattern = options['name']

nr_cls_dict = dict(
  server       = NewRelicServers,
  alert_policy = NewRelicAlertPolicies,
)

nr_cls  = nr_cls_dict.get(options['<object>'])
nr_inst = nr_cls(options['api-key'], loglevel = cfg['loglevel'][options['loglevel']])

if options['<command>'] == 'list':
  print nr_inst.list(options['json'])
   
elif options['<command>'] == 'search':
  print nr_inst.search(field, pattern)
 
 # Clean no longer reporting servers
elif options['<command>'] == 'clean':
  items = nr_inst.search(field, pattern)
  for id in items:
    nr_inst.delete(id)
 
 # Add one or a set of servers to an alert policy
elif options['<command>'] == 'policy':
  policy_inst = nr_cls_dict.get('alert_policy')(
    options['api-key'], 
    loglevel = cfg['loglevel'][options['loglevel']]
  )
  policy = policy_inst.search('name', options['policy-name'])

  if len(policy) > 1:
    logging.error("Policy name %s matches more than one policy" % options['alert-policy'])
    sys.exit(10)
    
  # List of servers that match the search
  servers = nr_inst.search(field, pattern)
 
  if len(servers) < 1:
    logging.error("Pattern %s for field %s did not match any server" % 
      (pattern, field)
    )
    sys.exit(11)
    
  policy_inst.add_servers(policy[0], servers)

