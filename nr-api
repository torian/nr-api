#!/usr/bin/env python
"""Usage: 
  nr-api server --to-policy POLICY [--id ID|--name NAME] [options]
  nr-api server --list  [options]
  nr-api server --clean [--id ID|--name NAME] [options]
  nr-api policy --list [options]
  nr-api label  --list [options]

Server Options:

  --to-policy POLICY      Add the server to the named policy
  --clean                 Clean servers that are not reporting. If the parameter

General options:

  -k APIKEY,--api-key APIKEY  NewRelic API Key
  --list                      List servers currently monitored
  -i ID,--id ID               Server id 
  -n NAME,--name NAME         Server name
  -j,--json                   Output json [default: False]
  -l LOGLEVEL,--loglevel      LOGLEVEL    loglevel [default: error]
  -h,--help                   Display help

"""

###############################################################################

import sys
import re
import json

from   pprint import pprint
from   docopt import  docopt

import logging

import newrelic_api.servers
import newrelic_api.labels as nrl

###############################################################################

class NewRelicServers(object):

  def __init__(self, api_key, loglevel = logging.INFO):
    self.nrs      = newrelic_api.servers.Servers(api_key = api_key)
    self.api_key  = api_key
    self.servers  = self.nrs.list()['servers']
    self.loglevel = loglevel

    log_fmt     = '%(asctime)s %(levelname)s: %(message)s'
    log_datefmt = '%d/%b/%Y:%H:%M:%S'
    logging.basicConfig(format = log_fmt, datefmt = log_datefmt, level = loglevel)


  def list(self, fmt_json = False):
    """
      Return a list of servers
    """
    #r = map(
    #  lambda s: { 'name': s['name'], 'host': s['name'], 'id': s['id'] }, 
    #  self.servers
    #)
    r = self.servers

    if fmt_json:
      return json.dumps(r)

    return r


  def search(self, pattern = None, field = None):
    """
      Search for servers that match a pattern.
      The field is defined by --id or --name parameters command line args
    """
    try:
      if field is None:
        field   = 'name'
        pattern = '.*'
      
      matches = filter(lambda s: re.search(str(pattern),str(s[field])) != None, self.servers)
      return map(lambda m: m['id'], matches)
    except IndexError:
      return None
    

  def server(self, id):
    """
      Look for id in server list and return the complete structure for it
    """
    try:
      return filter(lambda server: server['id'] == id, self.servers)[0]
    except IndexError:
      return None


  def delete(self, id):
    """
      Delete a server from NR
      Only servers that are not reporting can be removed
    """
    try:
      s = filter(lambda server: server['id'] == id, self.servers)[0]
      logging.info("Server to remove: %s [%s]" % (s['name'], s['host']))
      
      if self.loglevel == logging.DEBUG:
        logging.debug("Deleting server: %s" % s)
      
      if s['reporting']:
        msg = "Reporting server %s[%s] cannot be deleted" % (s['host'], s['id'])
        logging.warning(msg)
        return False
      
      self.nrs.delete(s['id'])
        
    except IndexError: 
      logging.warning("Server ID %s does not exist" % id)



class NewRelicAlertPolicies(object):

  def __init__(self, api_key, loglevel = logging.INFO):
    self.api_key  = api_key
    self.nrp      = newrelic_api.alert_policies.AlertPolicies(api_key = api_key)
    self.policies = self.nrp.list()['alert_policies']

    self.loglevel = loglevel

    log_fmt     = '%(asctime)s %(levelname)s: %(message)s'
    log_datefmt = '%d/%b/%Y:%H:%M:%S'
    logging.basicConfig(format = log_fmt, datefmt = log_datefmt, level = loglevel)


  def list(self, fmt_json = False):
    r = self.policies
    if fmt_json:
      return json.dumps(r)

    return r


  def search(self, pattern = None, field = None):
    """
      Search for policies that match a pattern.
      The field is defined by --id or --name parameters command line args
    """
    try:
      matches = filter(lambda p: re.search(str(pattern),str(p[field])) != None, self.policies)
      return map(lambda m: m['id'], matches)
    except IndexError:
      return None


  def policy(self, id):
    try:
      return filter(lambda p: p['id'] == id, self.policies)[0]
    except IndexError:
      return None


  def id(self, name):
    try:
      return filter(lambda p: p['name'] == name, self.policies())[0]['id']
    except IndexError:
      return None


  def add_server(self, id, server_ids = None):
    if server_ids is None:
      return False

    policy        = self.policy(id)
    policy_update = policy.copy()

    server_list   = policy['links']['servers']
    server_list.extend(server_ids)

    policy_update['links']['servers'] = server_list

    logging.info("Update policy %s with server ids %s" % (id, server_list))
    self.nrp.update(id, { 'alert_policy': policy_update })



class NewRelicLabels(object):

  def __init__(self, api_key, loglevel = logging.INFO):
    self.nrl     = newrelic_api.labels.Labels(api_key = api_key)
    self.labels  = self.nrl.list()['labels']
    self.api_key = api_key

    self.loglevel = loglevel

    log_fmt     = '%(asctime)s %(levelname)s: %(message)s'
    log_datefmt = '%d/%b/%Y:%H:%M:%S'
    logging.basicConfig(format = log_fmt, datefmt = log_datefmt, level = loglevel)


  def list(self, fmt_json = False):
    #return map(lambda l: { 'category': l['category'], 'name': l['name'] }, self.labels)
    r = self.labels

    if fmt_json:
      return json.dumps(r)

    return r


  def label_name(self, id):
    try:
      return filter(lambda s: s['id'] == id, self.labels)[0]
    except IndexError:
      return None

###############################################################################

cfg = {
  'loglevel': {
    'none':     logging.NOTSET,
    'info':     logging.INFO,
    'warn':     logging.WARN,
    'error':    logging.ERROR,
    'debug':    logging.DEBUG,
    'critical': logging.CRITICAL,
  }
}

# Options from __doc__
opts    = docopt(__doc__)
options = {}

# Set some defaults
for o in opts:
  key = o.strip('-')

  options[key] = opts[o]
 
# Debugging of options
if options['loglevel'] == 'debug':
  pprint(options)

servers  = NewRelicServers(options['api-key'], loglevel = cfg['loglevel'][options['loglevel']])
labels   = NewRelicLabels(options['api-key'], loglevel = cfg['loglevel'][options['loglevel']])
policies = NewRelicAlertPolicies(options['api-key'], loglevel = cfg['loglevel'][options['loglevel']])

field   = None
pattern = None

if options['id']: 
  field   = 'id'
  pattern = options['id']

elif options['name']: 
  field   = 'name'
  pattern = options['name']

elif options['label']: 
  field   = 'label'
  pattern = options['label']



# Actions for server
if options['server']:
  
  if options['list']:
    print servers.list(options['json'])
   
  elif options['to-policy']:
    # Make sure servers exists
    srv    = servers.search(pattern, field)
    policy = policies.search(options['to-policy'], 'name')

    if len(policy) > 1:
      logging.error("Policy name %s matches more than one policy" % options['to-policy'])
      
    policies.add_server(policy[0], srv)

  elif options['clean']:
    srv = servers.search(pattern, field)
    for s in srv:
      servers.delete(s)
 
elif options['label']:

    if options['list']:
      print servers.list(options['json'])

elif options['policy']:

    if options['list']:
      print policies.list(options['json'])
 
